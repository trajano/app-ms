version: '3.2'
services:
  web:
    image: nginx:alpine
    networks:
    - gateway-web
  gateway-ms:
    build: ./ms-gateway
    depends_on:
    - log-elasticsearch
    - authorization-ms
    networks:
    - default
    - gateway-web
    - gateway-auth
    environment:
    - SPRING_PROFILES_ACTIVE=docker-compose
    ports:
    - "3001:80"
  authentication-ms:
    build: ./sample-authn
    environment:
    - SPRING_PROFILES_ACTIVE=docker-compose
    networks:
    - default
    - gateway-auth
  authorization-ms:
    build: ./sample-authz
    environment:
    - SPRING_PROFILES_ACTIVE=docker-compose
    networks:
    - gateway-auth
    - authorization
  sample-ms:
    build: ./sample-ms
    environment:
    - SPRING_PROFILES_ACTIVE=docker-compose
    deploy:
      replicas: 2
  swagger-ms:
    build: ./ms-swagger
    environment:
    - SPRING_PROFILES_ACTIVE=docker-compose
    deploy:
      replicas: 2
  security-cache:
    image: hazelcast/hazelcast:latest
    deploy:
      replicas: 2
    environment:
    - "MAX_HEAP_SIZE=512m"
    networks:
    - authorization
  cache:
    image: hazelcast/hazelcast:latest
    environment:
    - "MAX_HEAP_SIZE=512m"
    deploy:
      replicas: 4
  
  log-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.3
    volumes:
    - logging:/usr/share/elasticsearch/data
    networks:
    - logging
    environment:
    - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      restart_policy:
        condition: on-failure
  logstash-ms:
    build: ./src/docker/logstash-ms
    depends_on:
    - log-elasticsearch
    networks:
    - default
    - logging
  kibana:
    image: docker.elastic.co/kibana/kibana:5.6.3
    ports:
    - "3002:5601"
    networks:
    - logging
    depends_on:
    - log-elasticsearch
    environment:
    - xpack.monitoring.ui.container.elasticsearch.enabled=false
    links:
    - log-elasticsearch:elasticsearch

networks:
  # The default network is used for all the microservices that are not associated with anything infrastructure related.  Primarily where the aplpication specific microservices reside.
  gateway-web:
  # This network is used to facilitate the communication between the gateway and the nginx web server.
  gateway-auth:
  # This network is used to facilitate the communication between the gateway and the authn/authz microservices.
  authorization:
  # authorization-ms has it's own network to prevent other microservices from using the cache 
  logging:
  # Internal services used for logging are put into this network, but the entry point for logging is exposed.   
volumes:
  logging:
    driver: local
